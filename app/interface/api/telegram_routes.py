from fastapi import APIRouter, Query, Request
from app.application.use_cases.static_question import StaticQuestionUseCase
from app.infrastructure.telegram.telegram_client import TelegramClient
from app.application.use_cases.process_message import ProcessMessageUseCase
from app.infrastructure.ai.geminiai_service import GeminiAIService
from app.domain.entities.message import Message

telegram_router = APIRouter()
process_message_use_case = ProcessMessageUseCase(ai_service=GeminiAIService())

@telegram_router.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    chat_id = str(data["message"]["chat"]["id"])
    user_text = data["message"]["text"]
    if user_text == "/iniciar":
        disclaimer = ("\nOl√°, eu sou o InclusionAI ü§ñ‚ú®\n\n"
            "Meu objetivo √© fornecer informa√ß√µes e orienta√ß√µes sobre inclus√£o educacional para crian√ßas com altas habilidades e superdota√ß√£o.\n\n"
            "Aqui est√£o algumas perguntas que voc√™ pode fazer:\n"
            "1Ô∏è‚É£ O que √© superdota√ß√£o?\n"
            "2Ô∏è‚É£ Como identificar altas habilidades?\n"
            "3Ô∏è‚É£ Quais direitos legais garantem inclus√£o escolar?\n"
            "4Ô∏è‚É£ Quais estrat√©gias ajudam professores em sala de aula?\n\n"
            "Digite o n√∫mero da op√ß√£o ou envie sua pergunta livremente.\n\n"
            "‚ö†Ô∏è Aviso: As respostas fornecidas aqui t√™m car√°ter informativo e n√£o substituem a orienta√ß√£o de profissionais especializados em educa√ß√£o, psicologia ou sa√∫de. Sempre consulte especialistas para decis√µes importantes.")
        await TelegramClient.send_message(chat_id, disclaimer)
        return {"ok": True}
    
    if user_text.isdigit():
        user_text = StaticQuestionUseCase.execute(user_text)

    resposta = await process_message_use_case.execute(Message(chat_id=chat_id, text=user_text))
    await TelegramClient.send_message(chat_id, resposta)

    return {"ok": True}


@telegram_router.post("/webhook/setup")
async def telegram_webhook_setup(ngrok_url: str):
    telegram_response = await TelegramClient.setup_webhook(ngrok_url)
    if (telegram_response is None):
        return {"error": "Failed to set up Telegram webhook"}
    
    return {
        "ok": True,
        "ngrok_url": ngrok_url,
        "telegram_response": telegram_response
    }